{"version":3,"file":"default-node_modules_angular_elements_fesm2022_elements_mjs.js","mappings":"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","sources":["./node_modules/rxjs/dist/esm/internal/ReplaySubject.js","./node_modules/rxjs/dist/esm/internal/Subject.js","./node_modules/rxjs/dist/esm/internal/observable/merge.js","./node_modules/rxjs/dist/esm/internal/operators/mergeAll.js","./node_modules/rxjs/dist/esm/internal/scheduler/dateTimestampProvider.js","./node_modules/rxjs/dist/esm/internal/util/ObjectUnsubscribedError.js","./node_modules/@angular/elements/fesm2022/elements.mjs"],"sourcesContent":["import { Subject } from './Subject';\nimport { dateTimestampProvider } from './scheduler/dateTimestampProvider';\nexport class ReplaySubject extends Subject {\n    constructor(_bufferSize = Infinity, _windowTime = Infinity, _timestampProvider = dateTimestampProvider) {\n        super();\n        this._bufferSize = _bufferSize;\n        this._windowTime = _windowTime;\n        this._timestampProvider = _timestampProvider;\n        this._buffer = [];\n        this._infiniteTimeWindow = true;\n        this._infiniteTimeWindow = _windowTime === Infinity;\n        this._bufferSize = Math.max(1, _bufferSize);\n        this._windowTime = Math.max(1, _windowTime);\n    }\n    next(value) {\n        const { isStopped, _buffer, _infiniteTimeWindow, _timestampProvider, _windowTime } = this;\n        if (!isStopped) {\n            _buffer.push(value);\n            !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);\n        }\n        this._trimBuffer();\n        super.next(value);\n    }\n    _subscribe(subscriber) {\n        this._throwIfClosed();\n        this._trimBuffer();\n        const subscription = this._innerSubscribe(subscriber);\n        const { _infiniteTimeWindow, _buffer } = this;\n        const copy = _buffer.slice();\n        for (let i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {\n            subscriber.next(copy[i]);\n        }\n        this._checkFinalizedStatuses(subscriber);\n        return subscription;\n    }\n    _trimBuffer() {\n        const { _bufferSize, _timestampProvider, _buffer, _infiniteTimeWindow } = this;\n        const adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;\n        _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);\n        if (!_infiniteTimeWindow) {\n            const now = _timestampProvider.now();\n            let last = 0;\n            for (let i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {\n                last = i;\n            }\n            last && _buffer.splice(0, last + 1);\n        }\n    }\n}\n","import { Observable } from './Observable';\nimport { Subscription, EMPTY_SUBSCRIPTION } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { arrRemove } from './util/arrRemove';\nimport { errorContext } from './util/errorContext';\nexport class Subject extends Observable {\n    constructor() {\n        super();\n        this.closed = false;\n        this.currentObservers = null;\n        this.observers = [];\n        this.isStopped = false;\n        this.hasError = false;\n        this.thrownError = null;\n    }\n    lift(operator) {\n        const subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    }\n    _throwIfClosed() {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n    }\n    next(value) {\n        errorContext(() => {\n            this._throwIfClosed();\n            if (!this.isStopped) {\n                if (!this.currentObservers) {\n                    this.currentObservers = Array.from(this.observers);\n                }\n                for (const observer of this.currentObservers) {\n                    observer.next(value);\n                }\n            }\n        });\n    }\n    error(err) {\n        errorContext(() => {\n            this._throwIfClosed();\n            if (!this.isStopped) {\n                this.hasError = this.isStopped = true;\n                this.thrownError = err;\n                const { observers } = this;\n                while (observers.length) {\n                    observers.shift().error(err);\n                }\n            }\n        });\n    }\n    complete() {\n        errorContext(() => {\n            this._throwIfClosed();\n            if (!this.isStopped) {\n                this.isStopped = true;\n                const { observers } = this;\n                while (observers.length) {\n                    observers.shift().complete();\n                }\n            }\n        });\n    }\n    unsubscribe() {\n        this.isStopped = this.closed = true;\n        this.observers = this.currentObservers = null;\n    }\n    get observed() {\n        var _a;\n        return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;\n    }\n    _trySubscribe(subscriber) {\n        this._throwIfClosed();\n        return super._trySubscribe(subscriber);\n    }\n    _subscribe(subscriber) {\n        this._throwIfClosed();\n        this._checkFinalizedStatuses(subscriber);\n        return this._innerSubscribe(subscriber);\n    }\n    _innerSubscribe(subscriber) {\n        const { hasError, isStopped, observers } = this;\n        if (hasError || isStopped) {\n            return EMPTY_SUBSCRIPTION;\n        }\n        this.currentObservers = null;\n        observers.push(subscriber);\n        return new Subscription(() => {\n            this.currentObservers = null;\n            arrRemove(observers, subscriber);\n        });\n    }\n    _checkFinalizedStatuses(subscriber) {\n        const { hasError, thrownError, isStopped } = this;\n        if (hasError) {\n            subscriber.error(thrownError);\n        }\n        else if (isStopped) {\n            subscriber.complete();\n        }\n    }\n    asObservable() {\n        const observable = new Observable();\n        observable.source = this;\n        return observable;\n    }\n}\nSubject.create = (destination, source) => {\n    return new AnonymousSubject(destination, source);\n};\nexport class AnonymousSubject extends Subject {\n    constructor(destination, source) {\n        super();\n        this.destination = destination;\n        this.source = source;\n    }\n    next(value) {\n        var _a, _b;\n        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);\n    }\n    error(err) {\n        var _a, _b;\n        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);\n    }\n    complete() {\n        var _a, _b;\n        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n    _subscribe(subscriber) {\n        var _a, _b;\n        return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;\n    }\n}\n","import { mergeAll } from '../operators/mergeAll';\nimport { innerFrom } from './innerFrom';\nimport { EMPTY } from './empty';\nimport { popNumber, popScheduler } from '../util/args';\nimport { from } from './from';\nexport function merge(...args) {\n    const scheduler = popScheduler(args);\n    const concurrent = popNumber(args, Infinity);\n    const sources = args;\n    return !sources.length\n        ?\n            EMPTY\n        : sources.length === 1\n            ?\n                innerFrom(sources[0])\n            :\n                mergeAll(concurrent)(from(sources, scheduler));\n}\n","import { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nexport function mergeAll(concurrent = Infinity) {\n    return mergeMap(identity, concurrent);\n}\n","export const dateTimestampProvider = {\n    now() {\n        return (dateTimestampProvider.delegate || Date).now();\n    },\n    delegate: undefined,\n};\n","import { createErrorClass } from './createErrorClass';\nexport const ObjectUnsubscribedError = createErrorClass((_super) => function ObjectUnsubscribedErrorImpl() {\n    _super(this);\n    this.name = 'ObjectUnsubscribedError';\n    this.message = 'object unsubscribed';\n});\n","/**\n * @license Angular v16.1.8\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { ComponentFactoryResolver, NgZone, Injector, ChangeDetectorRef, ApplicationRef, SimpleChange, Version } from '@angular/core';\nimport { ReplaySubject, merge } from 'rxjs';\nimport { switchMap, map } from 'rxjs/operators';\n\n/**\n * Provide methods for scheduling the execution of a callback.\n */\nconst scheduler = {\n    /**\n     * Schedule a callback to be called after some delay.\n     *\n     * Returns a function that when executed will cancel the scheduled function.\n     */\n    schedule(taskFn, delay) {\n        const id = setTimeout(taskFn, delay);\n        return () => clearTimeout(id);\n    },\n    /**\n     * Schedule a callback to be called before the next render.\n     * (If `window.requestAnimationFrame()` is not available, use `scheduler.schedule()` instead.)\n     *\n     * Returns a function that when executed will cancel the scheduled function.\n     */\n    scheduleBeforeRender(taskFn) {\n        // TODO(gkalpak): Implement a better way of accessing `requestAnimationFrame()`\n        //                (e.g. accounting for vendor prefix, SSR-compatibility, etc).\n        if (typeof window === 'undefined') {\n            // For SSR just schedule immediately.\n            return scheduler.schedule(taskFn, 0);\n        }\n        if (typeof window.requestAnimationFrame === 'undefined') {\n            const frameMs = 16;\n            return scheduler.schedule(taskFn, frameMs);\n        }\n        const id = window.requestAnimationFrame(taskFn);\n        return () => window.cancelAnimationFrame(id);\n    },\n};\n/**\n * Convert a camelCased string to kebab-cased.\n */\nfunction camelToDashCase(input) {\n    return input.replace(/[A-Z]/g, char => `-${char.toLowerCase()}`);\n}\n/**\n * Check whether the input is an `Element`.\n */\nfunction isElement(node) {\n    return !!node && node.nodeType === Node.ELEMENT_NODE;\n}\n/**\n * Check whether the input is a function.\n */\nfunction isFunction(value) {\n    return typeof value === 'function';\n}\n/**\n * Convert a kebab-cased string to camelCased.\n */\nfunction kebabToCamelCase(input) {\n    return input.replace(/-([a-z\\d])/g, (_, char) => char.toUpperCase());\n}\nlet _matches;\n/**\n * Check whether an `Element` matches a CSS selector.\n * NOTE: this is duplicated from @angular/upgrade, and can\n * be consolidated in the future\n */\nfunction matchesSelector(el, selector) {\n    if (!_matches) {\n        const elProto = Element.prototype;\n        _matches = elProto.matches || elProto.matchesSelector || elProto.mozMatchesSelector ||\n            elProto.msMatchesSelector || elProto.oMatchesSelector || elProto.webkitMatchesSelector;\n    }\n    return el.nodeType === Node.ELEMENT_NODE ? _matches.call(el, selector) : false;\n}\n/**\n * Test two values for strict equality, accounting for the fact that `NaN !== NaN`.\n */\nfunction strictEquals(value1, value2) {\n    return value1 === value2 || (value1 !== value1 && value2 !== value2);\n}\n/** Gets a map of default set of attributes to observe and the properties they affect. */\nfunction getDefaultAttributeToPropertyInputs(inputs) {\n    const attributeToPropertyInputs = {};\n    inputs.forEach(({ propName, templateName, transform }) => {\n        attributeToPropertyInputs[camelToDashCase(templateName)] = [propName, transform];\n    });\n    return attributeToPropertyInputs;\n}\n/**\n * Gets a component's set of inputs. Uses the injector to get the component factory where the inputs\n * are defined.\n */\nfunction getComponentInputs(component, injector) {\n    const componentFactoryResolver = injector.get(ComponentFactoryResolver);\n    const componentFactory = componentFactoryResolver.resolveComponentFactory(component);\n    return componentFactory.inputs;\n}\n\n// NOTE: This is a (slightly improved) version of what is used in ngUpgrade's\nfunction extractProjectableNodes(host, ngContentSelectors) {\n    const nodes = host.childNodes;\n    const projectableNodes = ngContentSelectors.map(() => []);\n    let wildcardIndex = -1;\n    ngContentSelectors.some((selector, i) => {\n        if (selector === '*') {\n            wildcardIndex = i;\n            return true;\n        }\n        return false;\n    });\n    for (let i = 0, ii = nodes.length; i < ii; ++i) {\n        const node = nodes[i];\n        const ngContentIndex = findMatchingIndex(node, ngContentSelectors, wildcardIndex);\n        if (ngContentIndex !== -1) {\n            projectableNodes[ngContentIndex].push(node);\n        }\n    }\n    return projectableNodes;\n}\nfunction findMatchingIndex(node, selectors, defaultIndex) {\n    let matchingIndex = defaultIndex;\n    if (isElement(node)) {\n        selectors.some((selector, i) => {\n            if ((selector !== '*') && matchesSelector(node, selector)) {\n                matchingIndex = i;\n                return true;\n            }\n            return false;\n        });\n    }\n    return matchingIndex;\n}\n\n/** Time in milliseconds to wait before destroying the component ref when disconnected. */\nconst DESTROY_DELAY = 10;\n/**\n * Factory that creates new ComponentNgElementStrategy instance. Gets the component factory with the\n * constructor's injector's factory resolver and passes that factory to each strategy.\n */\nclass ComponentNgElementStrategyFactory {\n    constructor(component, injector) {\n        this.componentFactory =\n            injector.get(ComponentFactoryResolver).resolveComponentFactory(component);\n    }\n    create(injector) {\n        return new ComponentNgElementStrategy(this.componentFactory, injector);\n    }\n}\n/**\n * Creates and destroys a component ref using a component factory and handles change detection\n * in response to input changes.\n */\nclass ComponentNgElementStrategy {\n    constructor(componentFactory, injector) {\n        this.componentFactory = componentFactory;\n        this.injector = injector;\n        // Subject of `NgElementStrategyEvent` observables corresponding to the component's outputs.\n        this.eventEmitters = new ReplaySubject(1);\n        /** Merged stream of the component's output events. */\n        this.events = this.eventEmitters.pipe(switchMap(emitters => merge(...emitters)));\n        /** Reference to the component that was created on connect. */\n        this.componentRef = null;\n        /** Reference to the component view's `ChangeDetectorRef`. */\n        this.viewChangeDetectorRef = null;\n        /**\n         * Changes that have been made to component inputs since the last change detection run.\n         * (NOTE: These are only recorded if the component implements the `OnChanges` interface.)\n         */\n        this.inputChanges = null;\n        /** Whether changes have been made to component inputs since the last change detection run. */\n        this.hasInputChanges = false;\n        /** Whether the created component implements the `OnChanges` interface. */\n        this.implementsOnChanges = false;\n        /** Whether a change detection has been scheduled to run on the component. */\n        this.scheduledChangeDetectionFn = null;\n        /** Callback function that when called will cancel a scheduled destruction on the component. */\n        this.scheduledDestroyFn = null;\n        /** Initial input values that were set before the component was created. */\n        this.initialInputValues = new Map();\n        this.unchangedInputs =\n            new Set(this.componentFactory.inputs.map(({ propName }) => propName));\n        this.ngZone = this.injector.get(NgZone);\n        this.elementZone = (typeof Zone === 'undefined') ? null : this.ngZone.run(() => Zone.current);\n    }\n    /**\n     * Initializes a new component if one has not yet been created and cancels any scheduled\n     * destruction.\n     */\n    connect(element) {\n        this.runInZone(() => {\n            // If the element is marked to be destroyed, cancel the task since the component was\n            // reconnected\n            if (this.scheduledDestroyFn !== null) {\n                this.scheduledDestroyFn();\n                this.scheduledDestroyFn = null;\n                return;\n            }\n            if (this.componentRef === null) {\n                this.initializeComponent(element);\n            }\n        });\n    }\n    /**\n     * Schedules the component to be destroyed after some small delay in case the element is just\n     * being moved across the DOM.\n     */\n    disconnect() {\n        this.runInZone(() => {\n            // Return if there is no componentRef or the component is already scheduled for destruction\n            if (this.componentRef === null || this.scheduledDestroyFn !== null) {\n                return;\n            }\n            // Schedule the component to be destroyed after a small timeout in case it is being\n            // moved elsewhere in the DOM\n            this.scheduledDestroyFn = scheduler.schedule(() => {\n                if (this.componentRef !== null) {\n                    this.componentRef.destroy();\n                    this.componentRef = null;\n                    this.viewChangeDetectorRef = null;\n                }\n            }, DESTROY_DELAY);\n        });\n    }\n    /**\n     * Returns the component property value. If the component has not yet been created, the value is\n     * retrieved from the cached initialization values.\n     */\n    getInputValue(property) {\n        return this.runInZone(() => {\n            if (this.componentRef === null) {\n                return this.initialInputValues.get(property);\n            }\n            return this.componentRef.instance[property];\n        });\n    }\n    /**\n     * Sets the input value for the property. If the component has not yet been created, the value is\n     * cached and set when the component is created.\n     */\n    setInputValue(property, value, transform) {\n        this.runInZone(() => {\n            if (transform) {\n                value = transform.call(this.componentRef?.instance, value);\n            }\n            if (this.componentRef === null) {\n                this.initialInputValues.set(property, value);\n                return;\n            }\n            // Ignore the value if it is strictly equal to the current value, except if it is `undefined`\n            // and this is the first change to the value (because an explicit `undefined` _is_ strictly\n            // equal to not having a value set at all, but we still need to record this as a change).\n            if (strictEquals(value, this.getInputValue(property)) &&\n                !((value === undefined) && this.unchangedInputs.has(property))) {\n                return;\n            }\n            // Record the changed value and update internal state to reflect the fact that this input has\n            // changed.\n            this.recordInputChange(property, value);\n            this.unchangedInputs.delete(property);\n            this.hasInputChanges = true;\n            // Update the component instance and schedule change detection.\n            this.componentRef.instance[property] = value;\n            this.scheduleDetectChanges();\n        });\n    }\n    /**\n     * Creates a new component through the component factory with the provided element host and\n     * sets up its initial inputs, listens for outputs changes, and runs an initial change detection.\n     */\n    initializeComponent(element) {\n        const childInjector = Injector.create({ providers: [], parent: this.injector });\n        const projectableNodes = extractProjectableNodes(element, this.componentFactory.ngContentSelectors);\n        this.componentRef = this.componentFactory.create(childInjector, projectableNodes, element);\n        this.viewChangeDetectorRef = this.componentRef.injector.get(ChangeDetectorRef);\n        this.implementsOnChanges = isFunction(this.componentRef.instance.ngOnChanges);\n        this.initializeInputs();\n        this.initializeOutputs(this.componentRef);\n        this.detectChanges();\n        const applicationRef = this.injector.get(ApplicationRef);\n        applicationRef.attachView(this.componentRef.hostView);\n    }\n    /** Set any stored initial inputs on the component's properties. */\n    initializeInputs() {\n        this.componentFactory.inputs.forEach(({ propName, transform }) => {\n            if (this.initialInputValues.has(propName)) {\n                // Call `setInputValue()` now that the component has been instantiated to update its\n                // properties and fire `ngOnChanges()`.\n                this.setInputValue(propName, this.initialInputValues.get(propName), transform);\n            }\n        });\n        this.initialInputValues.clear();\n    }\n    /** Sets up listeners for the component's outputs so that the events stream emits the events. */\n    initializeOutputs(componentRef) {\n        const eventEmitters = this.componentFactory.outputs.map(({ propName, templateName }) => {\n            const emitter = componentRef.instance[propName];\n            return emitter.pipe(map(value => ({ name: templateName, value })));\n        });\n        this.eventEmitters.next(eventEmitters);\n    }\n    /** Calls ngOnChanges with all the inputs that have changed since the last call. */\n    callNgOnChanges(componentRef) {\n        if (!this.implementsOnChanges || this.inputChanges === null) {\n            return;\n        }\n        // Cache the changes and set inputChanges to null to capture any changes that might occur\n        // during ngOnChanges.\n        const inputChanges = this.inputChanges;\n        this.inputChanges = null;\n        componentRef.instance.ngOnChanges(inputChanges);\n    }\n    /**\n     * Marks the component view for check, if necessary.\n     * (NOTE: This is required when the `ChangeDetectionStrategy` is set to `OnPush`.)\n     */\n    markViewForCheck(viewChangeDetectorRef) {\n        if (this.hasInputChanges) {\n            this.hasInputChanges = false;\n            viewChangeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Schedules change detection to run on the component.\n     * Ignores subsequent calls if already scheduled.\n     */\n    scheduleDetectChanges() {\n        if (this.scheduledChangeDetectionFn) {\n            return;\n        }\n        this.scheduledChangeDetectionFn = scheduler.scheduleBeforeRender(() => {\n            this.scheduledChangeDetectionFn = null;\n            this.detectChanges();\n        });\n    }\n    /**\n     * Records input changes so that the component receives SimpleChanges in its onChanges function.\n     */\n    recordInputChange(property, currentValue) {\n        // Do not record the change if the component does not implement `OnChanges`.\n        if (!this.implementsOnChanges) {\n            return;\n        }\n        if (this.inputChanges === null) {\n            this.inputChanges = {};\n        }\n        // If there already is a change, modify the current value to match but leave the values for\n        // `previousValue` and `isFirstChange`.\n        const pendingChange = this.inputChanges[property];\n        if (pendingChange) {\n            pendingChange.currentValue = currentValue;\n            return;\n        }\n        const isFirstChange = this.unchangedInputs.has(property);\n        const previousValue = isFirstChange ? undefined : this.getInputValue(property);\n        this.inputChanges[property] = new SimpleChange(previousValue, currentValue, isFirstChange);\n    }\n    /** Runs change detection on the component. */\n    detectChanges() {\n        if (this.componentRef === null) {\n            return;\n        }\n        this.callNgOnChanges(this.componentRef);\n        this.markViewForCheck(this.viewChangeDetectorRef);\n        this.componentRef.changeDetectorRef.detectChanges();\n    }\n    /** Runs in the angular zone, if present. */\n    runInZone(fn) {\n        return (this.elementZone && Zone.current !== this.elementZone) ? this.ngZone.run(fn) : fn();\n    }\n}\n\n/**\n * Implements the functionality needed for a custom element.\n *\n * @publicApi\n */\nclass NgElement extends HTMLElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * A subscription to change, connect, and disconnect events in the custom element.\n         */\n        this.ngElementEventsSubscription = null;\n    }\n}\n/**\n *  @description Creates a custom element class based on an Angular component.\n *\n * Builds a class that encapsulates the functionality of the provided component and\n * uses the configuration information to provide more context to the class.\n * Takes the component factory's inputs and outputs to convert them to the proper\n * custom element API and add hooks to input changes.\n *\n * The configuration's injector is the initial injector set on the class,\n * and used by default for each created instance.This behavior can be overridden with the\n * static property to affect all newly created instances, or as a constructor argument for\n * one-off creations.\n *\n * @see [Angular Elements Overview](guide/elements \"Turning Angular components into custom elements\")\n *\n * @param component The component to transform.\n * @param config A configuration that provides initialization information to the created class.\n * @returns The custom-element construction class, which can be registered with\n * a browser's `CustomElementRegistry`.\n *\n * @publicApi\n */\nfunction createCustomElement(component, config) {\n    const inputs = getComponentInputs(component, config.injector);\n    const strategyFactory = config.strategyFactory || new ComponentNgElementStrategyFactory(component, config.injector);\n    const attributeToPropertyInputs = getDefaultAttributeToPropertyInputs(inputs);\n    class NgElementImpl extends NgElement {\n        // Work around a bug in closure typed optimizations(b/79557487) where it is not honoring static\n        // field externs. So using quoted access to explicitly prevent renaming.\n        static { this['observedAttributes'] = Object.keys(attributeToPropertyInputs); }\n        get ngElementStrategy() {\n            // TODO(andrewseguin): Add e2e tests that cover cases where the constructor isn't called. For\n            // now this is tested using a Google internal test suite.\n            if (!this._ngElementStrategy) {\n                const strategy = this._ngElementStrategy =\n                    strategyFactory.create(this.injector || config.injector);\n                // Re-apply pre-existing input values (set as properties on the element) through the\n                // strategy.\n                inputs.forEach(({ propName, transform }) => {\n                    if (!this.hasOwnProperty(propName)) {\n                        // No pre-existing value for `propName`.\n                        return;\n                    }\n                    // Delete the property from the instance and re-apply it through the strategy.\n                    const value = this[propName];\n                    delete this[propName];\n                    strategy.setInputValue(propName, value, transform);\n                });\n            }\n            return this._ngElementStrategy;\n        }\n        constructor(injector) {\n            super();\n            this.injector = injector;\n        }\n        attributeChangedCallback(attrName, oldValue, newValue, namespace) {\n            const [propName, transform] = attributeToPropertyInputs[attrName];\n            this.ngElementStrategy.setInputValue(propName, newValue, transform);\n        }\n        connectedCallback() {\n            // For historical reasons, some strategies may not have initialized the `events` property\n            // until after `connect()` is run. Subscribe to `events` if it is available before running\n            // `connect()` (in order to capture events emitted during initialization), otherwise subscribe\n            // afterwards.\n            //\n            // TODO: Consider deprecating/removing the post-connect subscription in a future major version\n            //       (e.g. v11).\n            let subscribedToEvents = false;\n            if (this.ngElementStrategy.events) {\n                // `events` are already available: Subscribe to it asap.\n                this.subscribeToEvents();\n                subscribedToEvents = true;\n            }\n            this.ngElementStrategy.connect(this);\n            if (!subscribedToEvents) {\n                // `events` were not initialized before running `connect()`: Subscribe to them now.\n                // The events emitted during the component initialization have been missed, but at least\n                // future events will be captured.\n                this.subscribeToEvents();\n            }\n        }\n        disconnectedCallback() {\n            // Not using `this.ngElementStrategy` to avoid unnecessarily creating the `NgElementStrategy`.\n            if (this._ngElementStrategy) {\n                this._ngElementStrategy.disconnect();\n            }\n            if (this.ngElementEventsSubscription) {\n                this.ngElementEventsSubscription.unsubscribe();\n                this.ngElementEventsSubscription = null;\n            }\n        }\n        subscribeToEvents() {\n            // Listen for events from the strategy and dispatch them as custom events.\n            this.ngElementEventsSubscription = this.ngElementStrategy.events.subscribe(e => {\n                const customEvent = new CustomEvent(e.name, { detail: e.value });\n                this.dispatchEvent(customEvent);\n            });\n        }\n    }\n    // Add getters and setters to the prototype for each property input.\n    inputs.forEach(({ propName, transform }) => {\n        Object.defineProperty(NgElementImpl.prototype, propName, {\n            get() {\n                return this.ngElementStrategy.getInputValue(propName);\n            },\n            set(newValue) {\n                this.ngElementStrategy.setInputValue(propName, newValue, transform);\n            },\n            configurable: true,\n            enumerable: true,\n        });\n    });\n    return NgElementImpl;\n}\n\n/**\n * @publicApi\n */\nconst VERSION = new Version('16.1.8');\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the `elements` package.\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n// This file is not used to build this module. It is only used during editing\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgElement, VERSION, createCustomElement };\n"],"names":["Subject","dateTimestampProvider","ReplaySubject","constructor","_bufferSize","Infinity","_windowTime","_timestampProvider","_buffer","_infiniteTimeWindow","Math","max","next","value","isStopped","push","now","_trimBuffer","_subscribe","subscriber","_throwIfClosed","subscription","_innerSubscribe","copy","slice","i","length","closed","_checkFinalizedStatuses","adjustedBufferSize","splice","last","Observable","Subscription","EMPTY_SUBSCRIPTION","ObjectUnsubscribedError","arrRemove","errorContext","currentObservers","observers","hasError","thrownError","lift","operator","subject","AnonymousSubject","Array","from","observer","error","err","shift","complete","unsubscribe","observed","_a","_trySubscribe","asObservable","observable","source","create","destination","_b","call","subscribe","mergeAll","innerFrom","EMPTY","popNumber","popScheduler","merge","args","scheduler","concurrent","sources","mergeMap","identity","delegate","Date","undefined","createErrorClass","_super","ObjectUnsubscribedErrorImpl","name","message","ComponentFactoryResolver","NgZone","Injector","ChangeDetectorRef","ApplicationRef","SimpleChange","Version","switchMap","map","schedule","taskFn","delay","id","setTimeout","clearTimeout","scheduleBeforeRender","window","requestAnimationFrame","frameMs","cancelAnimationFrame","camelToDashCase","input","replace","char","toLowerCase","isElement","node","nodeType","Node","ELEMENT_NODE","isFunction","kebabToCamelCase","_","toUpperCase","_matches","matchesSelector","el","selector","elProto","Element","prototype","matches","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","strictEquals","value1","value2","getDefaultAttributeToPropertyInputs","inputs","attributeToPropertyInputs","forEach","propName","templateName","transform","getComponentInputs","component","injector","componentFactoryResolver","get","componentFactory","resolveComponentFactory","extractProjectableNodes","host","ngContentSelectors","nodes","childNodes","projectableNodes","wildcardIndex","some","ii","ngContentIndex","findMatchingIndex","selectors","defaultIndex","matchingIndex","DESTROY_DELAY","ComponentNgElementStrategyFactory","ComponentNgElementStrategy","eventEmitters","events","pipe","emitters","componentRef","viewChangeDetectorRef","inputChanges","hasInputChanges","implementsOnChanges","scheduledChangeDetectionFn","scheduledDestroyFn","initialInputValues","Map","unchangedInputs","Set","ngZone","elementZone","Zone","run","current","connect","element","runInZone","initializeComponent","disconnect","destroy","getInputValue","property","instance","setInputValue","set","has","recordInputChange","delete","scheduleDetectChanges","childInjector","providers","parent","ngOnChanges","initializeInputs","initializeOutputs","detectChanges","applicationRef","attachView","hostView","clear","outputs","emitter","callNgOnChanges","markViewForCheck","markForCheck","currentValue","pendingChange","isFirstChange","previousValue","changeDetectorRef","fn","NgElement","HTMLElement","arguments","ngElementEventsSubscription","createCustomElement","config","strategyFactory","NgElementImpl","ngElementStrategy","_ngElementStrategy","strategy","hasOwnProperty","attributeChangedCallback","attrName","oldValue","newValue","namespace","connectedCallback","subscribedToEvents","subscribeToEvents","disconnectedCallback","e","customEvent","CustomEvent","detail","dispatchEvent","Object","keys","defineProperty","configurable","enumerable","VERSION"],"sourceRoot":"webpack:///","x_google_ignoreList":[0,1,2,3,4,5,6]}